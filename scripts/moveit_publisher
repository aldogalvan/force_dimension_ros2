#!/usr/bin/python3

""" A simple example that illustrates use of the Force Dimension ROS2 package.
"""

# ROS imports.
import rclpy
from rclpy.node import Node
from example_interfaces.msg import Float64
from geometry_msgs.msg import Point, Quaternion, TwistStamped, Vector3, PoseStamped

class ForceDimensionNode(Node):
    def __init__(self):
        super().__init__('force_dimension_node')
        
        # Initialize variables to hold position and orientation.
        self.position = None
        self.orientation = None
        self.velocity = None
        self.angular_velocity = None
        self.gripper_angle = 0
        
        # Create publishers.
        self.force_publisher = self.create_publisher(Vector3, '/robot/command/force', 10)
        self.twist_publisher = self.create_publisher(TwistStamped, '/servo_node/delta_twist_cmds', 10)
        self.pose_publisher = self.create_publisher(PoseStamped, '/servo_node/pose_cmds', 10)
        
        # Create subscribers.
        self.position_subscription = self.create_subscription(Point, '/robot/feedback/position', self.position_callback, 10)
        self.orientation_subscription = self.create_subscription(Quaternion, '/robot/feedback/orientation', self.orientation_callback, 10)
        self.velocity_subscription = self.create_subscription(Vector3, '/robot/feedback/velocity', self.velocity_callback, 10)
        self.angular_velocity_subscription = self.create_subscription(Vector3, '/robot/feedback/angular_velocity', self.angular_velocity_callback, 10)
        self.gripper_angle_subscription = self.create_subscription(Float64, '/robot/feedback/gripper_angle', self.gripper_angle_callback, 10)
        
        # Create a timer to publish messages at a regular interval.
        self.timer = self.create_timer(0.01, self.publish_messages)

    def position_callback(self, msg):
        self.position = msg

    def orientation_callback(self, msg):
        self.orientation = msg

    def velocity_callback(self, msg):
        self.velocity = msg

    def angular_velocity_callback(self, msg):
        self.angular_velocity = msg

    def gripper_angle_callback(self, msg):
        self.gripper_angle = msg.data

    def command_force(self):
        force_msg = Vector3()
        force_msg.x = 0.0
        force_msg.y = 0.0
        force_msg.z = 0.0
        self.force_publisher.publish(force_msg)

    def publish_twist(self):
        twist_msg = TwistStamped()
        if self.velocity is not None:
            twist_msg.twist.linear = self.velocity
        if self.angular_velocity is not None:
            twist_msg.twist.angular = self.angular_velocity
        self.twist_publisher.publish(twist_msg)
        
    def publish_pose(self):
        pose_msg = PoseStamped()
        if self.position is not None and self.orientation is not None:
            pose_msg.pose.position = self.position
            pose_msg.pose.orientation = self.orientation
        self.pose_publisher.publish(pose_msg)
        
    def publish_messages(self):
        self.publish_twist()
        self.publish_pose()
        self.command_force()

def main():
    rclpy.init()
    node = ForceDimensionNode()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()


